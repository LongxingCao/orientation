Nearly optimal coverings of orientation space.

Here we give various sets of orientations with cover orientation space
nearly optimally.  These are suitable for searching orientation space
and for integrating over orientation (together with the provided
weights).

Given a set of N orientations, we define its covering radius, alpha, as
the maximum amount by which an arbitrary orientation needs to be rotated
to align it with the closest member of the set.  The coverage, c, is
defined as

	N(alpha - sin alpha)
    c = --------------------
		pi

A set of orientations is optimal if

* there are no other sets with the same numder of elements with a
 smaller alpha (and c).

* all sets with a smaller number of elements have a larger alpha.

For any set of N orientations, we can perform a Voronoi tesselatation of
orientation space, associating with each member of the set, q_i, all
orientations for which q_i is the closest orientation.  We define the
relative weight of q_i as

		 volume of Voronoi cell
    w_i = N ---------------------------------
	    total volume of orientation space

We can approximate an orientational average of f(q) with

    <f> = sum w_i f(q_i) / N

Assuming that the variation in f is bounded, we expect that, for a given
N, the error in this approximation to be minimized with an optimal set
of orientations.

Expressing the orientation as a unit quaternion or a pair of opposite
points on S^3, we see that this problem is just a 4-dimensional
generalization of the "Spherical Covering" problem.  See

    R. H. Hardin, N. J. A. Sloane, and W. D. Smith
    Spherical Coverings
    http://www.research.att.com/~njas/coverings/

with the additional constraint that the points come as opposite pairs.
The formula for c above involves the "area" of a spherical cap on S^3.

We provide here "nearly" optimal sets of points.  Since our interest is
primarily on being able to general "good" sets at several values of N,
we generated most of these sets by placing a body-centered-cubic lattice
within the cells of a truncated-cubic tetracontaoctachoron (48-cell).

Here is the procedure.  Each cell of the 48-cell is a truncated cube.
Define the primary cell as

    p_0 = 1
    p_{i>0} < sqrt(2) - 1
    |p_1| + |p_2| + |p_2| < 1

the other cells are generated from this by the application of the
rotational symmetry group of the cube.

Place a body-centered-cubic lattice, with lattice spacing delta, within
the primary cell (including only points lying within the cell).  Thus we
take

   p_0 = 1
   [p_1, p_2, p_3] = [i, j, k] * delta/2

where [i, j, k] are either all even or all odd (to give a BCC lattice).
These points are then normalized with q = p / |p| to place them on S^3.

As delta is varied the number of points within the cell (N/24) varies.
For a given N, pick the delta with the smallest covering.  (To obtain
the sets given here, we systematicallly varied delta in steps of
0.00001.)  Discard any N for which there is a smaller N with a smaller
(or equal) alpha.

There are many ways in which we might imagine improving these sets.
Using a non-uniform lattice spacing sometimes improves the coverage (two
examples are included here).  One might offset the lattice or perturb
the points here the surface of the cells.  However because these
strategies make the search for good sets considerably more complex, the
simple procedure outlined above probably gives results which are "good
enough".


The format for each set is:

1 line containing
N alpha(degrees) c

N lines containing (i = 1..N)
q_0i q_1i q_2i q_3i w_i

name     N   alpha  coverage  delta  sigma download
c48u1         24 62.80 1.57514 0.70000 0.00
c600v         60 44.48 1.44480
c48u9        216 38.45 3.38698 0.41422 0.00 
c600vc       360 27.78 2.15246
c600vec      720 22.25 2.22117
c48u27       648 20.83 1.64091 0.33582 0.00 
c48u83      1992 16.29 2.42065 0.25970 0.00
c48u157     3768 14.49 3.22614 0.20710 0.00
c48u181     4344 12.29 2.27013 0.19415 0.00
c48u309     7416 10.07 2.13338 0.15846 0.00
c48n309     7416  9.72 1.91567 0.15167 1.86 
c48u519    12456  9.05 2.60257 0.13807 0.00
c48u527    12648  8.43 2.13318 0.13229 0.00
c48n527    12648  8.17 1.94334 0.12599 1.86
c48u815    19560  7.40 2.23719 0.11607 0.00
c48u1153   27672  6.60 2.23735 0.10330 0.00
c48u1201   28824  6.48 2.20918 0.09999 0.00
c48u1641   39384  5.75 2.10646 0.08993 0.00
c48u2219   53256  5.27 2.20117 0.08249 0.00
c48u2867   68808  5.24 2.79649 0.07531 0.00
c48u2947   70728  4.71 2.07843 0.07359 0.00
c48u3733   89592  4.37 2.11197 0.06836 0.00
c48u4701  112824  4.22 2.39041 0.06372 0.00
c48u4749  113976  4.00 2.05300 0.06248 0.00
c48u5879  141096  3.74 2.07325 0.05837 0.00
c48u7111  170664  3.53 2.11481 0.05514 0.00
c48u8649  207576  3.26 2.02898 0.05094 0.00





























For each set, can obtain new sets by performing an arbitrary rotation of
R^4 via

    q'_i = r q_i s

where r and s are fixed (possibly random) unit quaternions.  The pre-
and post-multiplication allows all rotations of R^4 to be accessed; see

    http://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation

One way of estimating the error in the numerical quadrature is to repeat
the calculation several times with the same set of points but choosing
different random r and s each time.

(Note that original sets possess symmetry that if q_i is a member of the
set then so is the inverse rotation q_i*.  The new sets q'_i do not have
this property, in general.)

Estimated accuracy (ulp = units in last place).

delta: exact (search for "optimum" was with resolution 1e-5)
spacing: exact
maxrad: 0.55e-2 (0.55 ulp)
coverage: 0.55e-5 (0.55 ulp)
weight: average 1e-6 (1 ulp)
        maximum 4e-6 (4 ulp)
        (last digit adjusted to give sum weight = ntot)
radius: 1.5e-2 (1.5 ulp)
q0, q1, q2, q3: 0.51e-9 (0.51 ulp)
